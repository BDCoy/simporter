"use client";

import React, { useState } from "react";

interface SlideData {
  title: string;
  type: "title" | "content" | "chart" | "table" | "image";
  content?: string;
  useAI?: boolean;
}

interface CreateSlideModalProps {
  isOpen: boolean;
  onClose: () => void;
  onCreateSlide: (slideData: SlideData) => void;
  useAI?: boolean;
}

export default function CreateSlideModal({
  isOpen,
  onClose,
  onCreateSlide,
  useAI = false
}: CreateSlideModalProps) {
  const [slideTitle, setSlideTitle] = useState("");
  const [slideType, setSlideType] = useState<"title" | "content" | "chart" | "table" | "image">("content");
  const [slideContent, setSlideContent] = useState("");
  const [creationMethod, setCreationMethod] = useState<"ai" | "manual">(useAI ? "ai" : "manual");
  const [isGenerating, setIsGenerating] = useState(false);
  const [templateSelection, setTemplateSelection] = useState("blank");

  // Templates for different slide types
  const slideTemplates = {
    title: [
      { id: "blank", name: "Blank Title Slide" },
      { id: "intro", name: "Introduction" },
      { id: "agenda", name: "Agenda" }
    ],
    content: [
      { id: "blank", name: "Blank Content" },
      { id: "bullets", name: "Bullet Points" },
      { id: "comparison", name: "Comparison" },
      { id: "quote", name: "Quote Block" }
    ],
    chart: [
      { id: "blank", name: "Empty Chart" },
      { id: "bar", name: "Bar Chart" },
      { id: "line", name: "Line Chart" },
      { id: "pie", name: "Pie Chart" }
    ],
    table: [
      { id: "blank", name: "Empty Table" },
      { id: "2x2", name: "2x2 Grid" },
      { id: "data", name: "Data Table" }
    ],
    image: [
      { id: "blank", name: "Empty Image Placeholder" },
      { id: "split", name: "Split Image and Text" }
    ]
  };

  // Reset form when closing
  const handleClose = () => {
    setSlideTitle("");
    setSlideType("content");
    setSlideContent("");
    setCreationMethod(useAI ? "ai" : "manual");
    setIsGenerating(false);
    setTemplateSelection("blank");
    onClose();
  };

  // Handle form submission
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!slideTitle.trim()) return;

    onCreateSlide({
      title: slideTitle,
      type: slideType,
      content: slideContent,
      useAI: creationMethod === "ai"
    });

    handleClose();
  };

  // Simulate AI generation
  const generateWithAI = () => {
    if (!slideTitle.trim()) return;
    
    setIsGenerating(true);
    
    // Simulate AI generation with a timeout
    setTimeout(() => {
      // Simulated AI-generated content based on slide type
      let generatedContent = "";
      
      switch (slideType) {
        case "title":
          generatedContent = `<h1 class="text-center text-3xl font-bold mb-4">${slideTitle}</h1>
<p class="text-center text-xl">AI-generated introduction for ${slideTitle}</p>
<p class="text-center text-gray-500 mt-4">Generated by Simporter AI</p>`;
          break;
        case "content":
          generatedContent = `<h2 class="text-2xl font-semibold mb-4">${slideTitle}</h2>
<ul class="space-y-2">
  <li>• AI-generated point one about ${slideTitle}</li>
  <li>• AI-generated point two with supporting details</li>
  <li>• AI-generated point three with analysis</li>
  <li>• AI-generated recommendation</li>
</ul>`;
          break;
        case "chart":
          generatedContent = `<h2 class="text-xl font-semibold mb-4 text-center">${slideTitle}</h2>
<div class="flex justify-center">
  <div class="bg-gray-100 dark:bg-gray-700 p-4 rounded w-full max-w-md text-center">
    <p class="text-gray-500 dark:text-gray-400">AI will generate an appropriate chart based on your data</p>
  </div>
</div>`;
          break;
        default:
          generatedContent = `<h2 class="text-xl font-semibold mb-4">${slideTitle}</h2>
<p>AI-generated content for ${slideTitle} slide.</p>`;
      }
      
      setSlideContent(generatedContent);
      setIsGenerating(false);
    }, 1500);
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-[#2c2c2e] rounded-xl shadow-xl w-full max-w-md p-6 animate-fade-in">
        <h3 className="text-xl font-semibold mb-5 text-[#334155] dark:text-[#e5e7eb]">Create New Slide</h3>
        
        {/* Creation method tabs */}
        <div className="flex border-b border-[#e5e7eb] dark:border-[#3a3a3c] mb-5">
          <button
            onClick={() => setCreationMethod("ai")}
            className={`flex-1 py-2 px-4 text-sm font-medium ${
              creationMethod === "ai" 
                ? "text-blue-600 dark:text-blue-400 border-b-2 border-blue-600 dark:border-blue-400" 
                : "text-[#64748b] dark:text-[#a1a1aa] hover:text-[#334155] dark:hover:text-[#e5e7eb]"
            }`}
          >
            AI Generated
          </button>
          <button
            onClick={() => setCreationMethod("manual")}
            className={`flex-1 py-2 px-4 text-sm font-medium ${
              creationMethod === "manual" 
                ? "text-blue-600 dark:text-blue-400 border-b-2 border-blue-600 dark:border-blue-400" 
                : "text-[#64748b] dark:text-[#a1a1aa] hover:text-[#334155] dark:hover:text-[#e5e7eb]"
            }`}
          >
            Manual Creation
          </button>
        </div>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-[#475569] dark:text-[#d4d4d8] mb-1">
              Slide Type
            </label>
            <select
              value={slideType}
              onChange={(e) => {
                setSlideType(e.target.value as any);
                setTemplateSelection("blank"); // Reset template when type changes
              }}
              className="w-full bg-white dark:bg-[#3a3a3c] border border-[#e5e7eb] dark:border-[#4c4c4e] rounded-lg p-2.5 text-[#334155] dark:text-[#e5e7eb] focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="title">Title Slide</option>
              <option value="content">Content Slide</option>
              <option value="chart">Chart Slide</option>
              <option value="table">Table Slide</option>
              <option value="image">Image Slide</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-[#475569] dark:text-[#d4d4d8] mb-1">
              Slide Title
            </label>
            <input
              type="text"
              value={slideTitle}
              onChange={(e) => setSlideTitle(e.target.value)}
              placeholder="Enter slide title"
              className="w-full bg-white dark:bg-[#3a3a3c] border border-[#e5e7eb] dark:border-[#4c4c4e] rounded-lg p-2.5 text-[#334155] dark:text-[#e5e7eb] focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>

          {creationMethod === "ai" ? (
            <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
              <p className="text-sm text-blue-800 dark:text-blue-300 mb-3">
                Our AI will generate slide content based on your title and type.
              </p>
              
              {isGenerating ? (
                <div className="flex items-center justify-center py-4">
                  <svg className="animate-spin h-5 w-5 text-blue-600 dark:text-blue-400 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  <span className="text-sm text-blue-800 dark:text-blue-300">Generating content...</span>
                </div>
              ) : (
                <button
                  type="button"
                  onClick={generateWithAI}
                  disabled={!slideTitle.trim()}
                  className="w-full py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-300 dark:disabled:bg-blue-800 text-white rounded-lg transition-colors"
                >
                  Generate Content
                </button>
              )}
              
              {slideContent && (
                <div className="mt-3 p-3 bg-white dark:bg-[#333336] border border-[#e5e7eb] dark:border-[#4c4c4e] rounded-lg max-h-40 overflow-y-auto">
                  <p className="text-xs text-[#475569] dark:text-[#d4d4d8] mb-1">Preview:</p>
                  <div className="text-sm text-[#334155] dark:text-[#e5e7eb]" dangerouslySetInnerHTML={{ __html: slideContent }} />
                </div>
              )}
            </div>
          ) : (
            <>
              <div>
                <label className="block text-sm font-medium text-[#475569] dark:text-[#d4d4d8] mb-1">
                  Template
                </label>
                <select
                  value={templateSelection}
                  onChange={(e) => setTemplateSelection(e.target.value)}
                  className="w-full bg-white dark:bg-[#3a3a3c] border border-[#e5e7eb] dark:border-[#4c4c4e] rounded-lg p-2.5 text-[#334155] dark:text-[#e5e7eb] focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  {slideTemplates[slideType].map(template => (
                    <option key={template.id} value={template.id}>{template.name}</option>
                  ))}
                </select>
              </div>
              
              {templateSelection !== "blank" && (
                <div className="bg-[#f8fafc] dark:bg-[#333336] border border-[#e5e7eb] dark:border-[#4c4c4e] rounded-lg p-3">
                  <p className="text-sm text-[#64748b] dark:text-[#a1a1aa]">
                    Template preview would appear here
                  </p>
                </div>
              )}
            </>
          )}

          <div className="flex justify-end space-x-3 pt-3">
            <button
              type="button"
              onClick={handleClose}
              className="px-4 py-2 border border-[#e5e7eb] dark:border-[#4c4c4e] rounded-lg text-[#475569] dark:text-[#d4d4d8] hover:bg-[#f8fafc] dark:hover:bg-[#333336] transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:bg-blue-300 dark:disabled:bg-blue-800"
              disabled={!slideTitle.trim() || (creationMethod === "ai" && !slideContent)}
            >
              Create Slide
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}